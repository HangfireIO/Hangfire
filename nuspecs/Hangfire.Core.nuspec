<?xml version="1.0"?>
<package>
  <metadata>
    <id>Hangfire.Core</id>
    <version>0.0.0</version>
    <title>Hangfire Core Components</title>
    <authors>Sergey Odinokov</authors>
    <owners>odinserj</owners>
    <projectUrl>https://www.hangfire.io/</projectUrl>
    <repository type="git" url="https://github.com/HangfireIO/Hangfire.git" />
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <licenseUrl>https://raw.github.com/HangfireIO/Hangfire/master/LICENSE.md</licenseUrl>
    <summary>An easy way to perform fire-and-forget, delayed and recurring tasks inside ASP.NET applications. No Windows Service required.</summary>
    <description>
An easy and reliable way to perform fire-and-forget, delayed and recurring, long-running, short-running, CPU or I/O intensive tasks inside ASP.NET applications. No Windows Service / Task Scheduler required. Even ASP.NET is not required.
Backed by Redis, SQL Server, SQL Azure or MSMQ. This is a .NET alternative to Sidekiq, Resque and Celery.
https://www.hangfire.io/
    </description>
    <copyright>Copyright © 2013-2022 Hangfire OÜ</copyright>
    <tags>Hangfire OWIN Long-Running Background Fire-And-Forget Delayed Recurring Tasks Jobs Scheduler Threading Queues</tags>
    <releaseNotes>https://www.hangfire.io/blog/

1.8.0-rc2
• Added – Support for default culture and UI culture via the `UseDefaultCulture` configuration method.
• Added – `CompatibilityLevel.Version_180` flag to avoid storing culture parameters when they are the same as default.
• Added – `BackgroundJobServerOptions.IsLightweightServer` option to run server with no storage processes.
• Changed – Use UI culture from `CurrentCulture` parameter when `CurrentUICulture` one is missing.

1.8.0-rc1
• Added – Introduce the `Job.Queue` property, so jobs now can have their own queue specified.
• Added – Method overloads to create background jobs directly with a custom default queue.
• Added – Method overloads to create recurring jobs directly with a custom default queue.
• Added – `IBackgroundJobClient.Create` method overloads with the new `queue` parameter.
• Added – `JobContinuationOptions.OnlyOnDeletedState` to create continuations after a failure.
• Added – Make it possible to specify multiple `JobContinuationOptions` values for a continuation.
• Added – Ability to use custom formattable resource identifiers for the `DisableConcurrentExecution` filter.
• Added – Pass `ServerId` to `FailedState` instances to simplify the debugging on different servers.
• Added – Allow to pass job parameters when creating a job (by @brian-knoll-micronetonline).
• Added – `MisfireHandlingMode.Strict` to create job for each missed recurring job occurrence.
• Added – `DeletedState` now have the persisted `Exception` property populated after a failure.
• Added – `Exception` job parameter is passed to continuation when `UseResultsInContinuations` method is used.
• Added – `FromExceptionAttribute` to deal with an antecedent exception in a background job continuation.
• Added – Allow to filter exception types in `AutomaticRetryAttribute` by using the new `OnlyOn` property.
• Added – Built-in `Remove` method for `JobFilterCollection` to remove global filters based on their type.
• Added – `IGlobalConfiguration.UseFilterProvider` extension method to unify the configuration.
• Changed – Use the `AttemptsExceededAction.Delete` option by default in the global automatic retry filter.
• Changed – Query time from storage in recurring and delayed schedulers when supported by storage.
• Changed – Increase the default value for the `BackgroundJobServerOptions.StopTimeout` to 500 ms.
• Changed – Speedup delayed jobs when custom default queue is specified by avoiding extra state transition.
• Changed – Move job to the `DeletedState` instead of `SucceededState` when its invocation was canceled by a filter.
• Deprecated – `AddOrUpdate` overloads with optional params defined in the `RecurringJobManagerExtensions` class.
• Deprecated – `AddOrUpdate` overloads with optional parameters defined in the `RecurringJob` class.
• Deprecated – `AddOrUpdate` method overloads with no `recurringJobId` parameter.
• Deprecated – `RecurringJobOptions.QueueName` property, new methods should be used instead.
• Breaking – Dropped `NET45` platform target in favor of `NET451` target to support Visual Studio 2022.

Dashboard UI
• Added – Dark mode support for Dashboard UI configurable with the `UseDarkModeSupportForDashboard` method (by @danillewin).
• Added – Dashboard UI now have full-width layout to display more data (by @danillewin).
• Added – Allow to add custom JavaScript and CSS files to the Dashboard UI via the `DashboardRoutes` class.
• Added – `IGlobalConfiguration.UseJobDetailsRenderer` method for custom renderers for Job Details page.
• Added – Display deleted jobs in the Realtime and History graphs when supported by storage.
• Added – `IGlobalConfiguration.UseDashboardMetrics` extension method to pass multiple metrics at once.
• Added – State renderer for the `DeletedState` to display its new exception property.
• Changed – Make it possible to display methods of non-loaded jobs in Dashboard UI when supported by storage.
• Changed – Improved display of real-time chart with more accents on failed and deleted jobs.
• Changed – Don't display queue name in state transition list when it's the `default` one.
• Changed – Display scheduled job count when enqueued count is zero on the main metric.

Extensibility
• Added – `Factory`, `StateMachine` and `Performer` properties to context classes to avoid injecting services.
• Added – Allow to pass custom data to `ApplyStateContext` and `ElectStateContext` instances.
• Added – Preserve custom data dictionary between the entire filter chain.
• Added – Allow to pass transaction to background job state changer when new methods implemented.
• Changed – Ignore some members when serializing a `JobFilterAttribute` instance to decrease payload size.

Storage
• Added – Virtual `JobStorage.GetReadOnlyConnection` method intended to return `JobStorageConnection` for replicas.
• Added – Virtual `JobStorage.HasFeature` method for querying optional features.
• Added – Optional `GetSetCount` and `GetUtcDateTime` methods for the `JobStorageConnection` class.
• Added – Optional `AcquireDistributedLock` and `RemoveFromQueue` methods for the `JobStorageTransaction` class.
• Added – Support for transactional acknowledge using new storage method for better handling some data loss scenarios.
• Added – `CreateJob` method to the `JobStorageTransaction` abstract class.
• Added – `SetJobParameter` method to the `JobStorageTransaction` abstract class.
• Added – Experimental `JobStorageConnection.SetContains` method.
• Added – Optional `ParametersSnapshot` property for `BackgroundJob` and `JobData` classes to minimize roundtrips in future.
• Added – Fetch "Retries" metric with other statistics when supported by storage.
• Added – `JobStorageMonitor` class with more available methods for the new features.
• Changed – Allow to query job parameters without additional roundtrip when supported by a storage.
• Changed – Expose state data dictionaries in list DTOs when supported by storage.

Internals
• Added – `IBackgroundProcess.UseBackgroundPool` now allows to pass thread configuration logic.
• Added – `BackgroundJobServerOptions.WorkerThreadConfigurationAction` option for custom thread configuration.
• Changed – Allow changing queues on the fly with custom worker configuration.
• Changed – Avoid storage roundtrip to query job data in worker, take data from previous state change.
• Changed – `FromParameterAttribute`-based logic now always overwrites arguments, even with non-null values.
• Changed – Turn `JobContinuationOptions` enum into flags while still possible.
• Changed – Re-implement `TaskExtensions.WaitOneAsync` only with the `RegisterWaitForSingleObject` method.
• Changed – `ServerHeartbeatProcess` now uses `ThreadPriority.AboveNormal` to prioritize heartbeats.
    </releaseNotes>
    <dependencies>
      <group targetFramework="net451">
        <dependency id="Owin" version="1.0" />
        <dependency id="Newtonsoft.Json" version="5.0.1" />
      </group>
      <group targetFramework="net46">
        <dependency id="Owin" version="1.0" />
        <dependency id="Newtonsoft.Json" version="5.0.1" />
      </group>
      <group targetFramework="netstandard1.3">
        <dependency id="NETStandard.Library" version="1.6.0" />
        <dependency id="System.Threading.Thread" version="4.0.0" />
        <dependency id="System.Threading.ThreadPool" version="4.0.10" />
        <dependency id="Newtonsoft.Json" version="9.0.1" />
      </group>
      <group targetFramework="netstandard2.0">
        <dependency id="Newtonsoft.Json" version="11.0.1" />
      </group>
    </dependencies>
  </metadata>
  <files>
    <file src="net451\Hangfire.Core.dll" target="lib\net451" />
    <file src="net451\Hangfire.Core.xml" target="lib\net451" />
    <file src="net451\Hangfire.Core.pdb" target="lib\net451" />

    <file src="net451\**\Hangfire.Core.resources.dll" target="lib\net451" />

    <file src="net46\Hangfire.Core.dll" target="lib\net46" />
    <file src="net46\Hangfire.Core.xml" target="lib\net46" />
    <file src="net46\Hangfire.Core.pdb" target="lib\net46" />

    <file src="net46\**\Hangfire.Core.resources.dll" target="lib\net46" />
    
    <file src="netstandard1.3\Hangfire.Core.dll" target="lib\netstandard1.3" />
    <file src="netstandard1.3\Hangfire.Core.xml" target="lib\netstandard1.3" />
    <file src="netstandard1.3\Hangfire.Core.pdb" target="lib\netstandard1.3" />

    <file src="netstandard1.3\**\Hangfire.Core.resources.dll" target="lib\netstandard1.3" />

    <file src="netstandard2.0\Hangfire.Core.dll" target="lib\netstandard2.0" />
    <file src="netstandard2.0\Hangfire.Core.xml" target="lib\netstandard2.0" />
    <file src="netstandard2.0\Hangfire.Core.pdb" target="lib\netstandard2.0" />

    <file src="netstandard2.0\**\Hangfire.Core.resources.dll" target="lib\netstandard2.0" />
    
    <file src="..\src\Hangfire.Core\**\*.cs;..\src\Hangfire.Core\**\*.cshtml" target="src" exclude="**\obj*\**\*.cs" />

    <file src="LICENSE.md" />
    <file src="COPYING" />
    <file src="COPYING.LESSER" />
    <file src="NOTICES" />
    <file src="LICENSE_STANDARD" />
    <file src="LICENSE_ROYALTYFREE" />
  </files>
</package>