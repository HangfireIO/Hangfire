<?xml version="1.0"?>
<package>
  <metadata>
    <id>Hangfire</id>
    <version>0.0.0</version>
    <title>Hangfire</title>
    <authors>Sergey Odinokov</authors>
    <owners>odinserj</owners>
    <projectUrl>https://www.hangfire.io/</projectUrl>
    <repository type="git" url="https://github.com/HangfireIO/Hangfire.git" />
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <licenseUrl>https://raw.github.com/HangfireIO/Hangfire/master/LICENSE.md</licenseUrl>
    <summary>An easy way to perform fire-and-forget, delayed and recurring tasks inside ASP.NET applications. No Windows Service required.</summary>
    <description>
An easy and reliable way to perform fire-and-forget, delayed and recurring, long-running, short-running, CPU or I/O intensive tasks inside ASP.NET applications. No Windows Service / Task Scheduler required. Even ASP.NET is not required.
Backed by Redis, SQL Server, SQL Azure or MSMQ. This is a .NET alternative to Sidekiq, Resque and Celery.
https://www.hangfire.io/
    </description>
    <copyright>Copyright © 2013-2022 Hangfire OÜ</copyright>
    <tags>Hangfire AspNet MVC AspNetCore SqlServer Long-Running Background Fire-And-Forget Delayed Recurring Tasks Jobs Scheduler Threading Queues</tags>
    <releaseNotes>https://www.hangfire.io/blog/

1.8.0-rc3

Hangfire.Core

• Added – Introduce the `captureDefault` parameter in the `CaptureCulture` filter.
• Added – Built-in awaiting metric through the `StatisticsDto.Awaiting` for monitoring stats.
• Added – `JobStorageFeatures` class to avoid using magic strings in storage features.
• Added – Create job atomically when corresponding storage feature supported.
• Added – Support for new MonitoringApi methods for the Awaiting Jobs page.
• Changed – Rely on `captureDefault` when dealing with default cultures instead of compatibility level.
• Changed – Rename in a non-breaking way `SetContains` to `GetSetContains` for consistency.
• Changed – Rely on storage indexing with `Monitoring.AwaitingJobs` feature.
• Changed – Rename the `BatchedGetFirstByLowest` feature.
• Changed – Throw more descriptive `NotSupportedException` from new storage methods
• Changed – Make new methods in `JobStorageMonitor` virtual, not abstract.
• Changed – Change GetSetCount with multiple keys in a non-breaking way.
• Fixed – Throw an exception early when `Job.Queue` feature not supported.
• Fixed – Don't show assembly details in deleted state renderer.
• Rollback – Use the `AttemptsExceededAction.Delete` option by default in the global automatic retry filter.

Hangfire.SqlServer

• Changed – Enable the `Monitoring.AwaitingJobs` feature for SQL storage.
• Changed – Implement the `Transaction.AcquireDistributedLock` feature.
• Changed – Implement the `GetSetCount.Limited feature`.
• Changed – Implement the `GetSetContains feature`.
• Fixed – Detect schema-related options after migration, not before, to get the actual schema version.

1.8.0-rc2

Hangfire.Core

• Added – Support for default culture and UI culture via the `UseDefaultCulture` configuration method.
• Added – `CompatibilityLevel.Version_180` flag to avoid storing culture parameters when they are the same as default.
• Added – `BackgroundJobServerOptions.IsLightweightServer` option to run server with no storage processes.
• Changed – Use UI culture from `CurrentCulture` parameter when `CurrentUICulture` one is missing.

Hangfire.SqlServer

• Breaking – Prioritise Microsoft.Data.SqlClient package over System.Data.SqlClient one.

• Changed – Bump internal version of Dapper to 2.0.123.
• Changed – Remove System.Data.SqlClient package from the NuGet dependency graph (by @0xced).

Hangfire.NetCore

• Added – `net451` and `netstandard1.3` targets for the package.
• Changed – Use `netstandard2.1` target instead of `netcoreapp3.0` for the package.

Hangfire.AspNetCore

• Breaking – Make the package to be dependent on Hangfire.NetCore to use the same types.

1.8.0-rc1

Hangfire.Core

• Added – Introduce the `Job.Queue` property, so jobs now can have their own queue specified.
• Added – Method overloads to create background jobs directly with a custom default queue.
• Added – Method overloads to create recurring jobs directly with a custom default queue.
• Added – `IBackgroundJobClient.Create` method overloads with the new `queue` parameter.
• Added – `JobContinuationOptions.OnlyOnDeletedState` to create continuations after a failure.
• Added – Make it possible to specify multiple `JobContinuationOptions` values for a continuation.
• Added – Ability to use custom formattable resource identifiers for the `DisableConcurrentExecution` filter.
• Added – Pass `ServerId` to `FailedState` instances to simplify the debugging on different servers.
• Added – Allow to pass job parameters when creating a job (by @brian-knoll-micronetonline).
• Added – `MisfireHandlingMode.Strict` to create job for each missed recurring job occurrence.
• Added – `DeletedState` now have the persisted `Exception` property populated after a failure.
• Added – `Exception` job parameter is passed to continuation when `UseResultsInContinuations` method is used.
• Added – `FromExceptionAttribute` to deal with an antecedent exception in a background job continuation.
• Added – Allow to filter exception types in `AutomaticRetryAttribute` by using the new `OnlyOn` property.
• Added – Built-in `Remove` method for `JobFilterCollection` to remove global filters based on their type.
• Added – `IGlobalConfiguration.UseFilterProvider` extension method to unify the configuration.
• Changed – Use the `AttemptsExceededAction.Delete` option by default in the global automatic retry filter.
• Changed – Query time from storage in recurring and delayed schedulers when supported by storage.
• Changed – Increase the default value for the `BackgroundJobServerOptions.StopTimeout` to 500 ms.
• Changed – Speedup delayed jobs when custom default queue is specified by avoiding extra state transition.
• Changed – Move job to the `DeletedState` instead of `SucceededState` when its invocation was canceled by a filter.
• Deprecated – `AddOrUpdate` overloads with optional params defined in the `RecurringJobManagerExtensions` class.
• Deprecated – `AddOrUpdate` overloads with optional parameters defined in the `RecurringJob` class.
• Deprecated – `AddOrUpdate` method overloads with no `recurringJobId` parameter.
• Deprecated – `RecurringJobOptions.QueueName` property, new methods should be used instead.
• Breaking – Dropped `NET45` platform target in favor of `NET451` target to support Visual Studio 2022.

Dashboard UI
• Added – Dark mode support for Dashboard UI configurable with the `UseDarkModeSupportForDashboard` method (by @danillewin).
• Added – Dashboard UI now have full-width layout to display more data (by @danillewin).
• Added – Allow to add custom JavaScript and CSS files to the Dashboard UI via the `DashboardRoutes` class.
• Added – `IGlobalConfiguration.UseJobDetailsRenderer` method for custom renderers for Job Details page.
• Added – Display deleted jobs in the Realtime and History graphs when supported by storage.
• Added – `IGlobalConfiguration.UseDashboardMetrics` extension method to pass multiple metrics at once.
• Added – State renderer for the `DeletedState` to display its new exception property.
• Changed – Make it possible to display methods of non-loaded jobs in Dashboard UI when supported by storage.
• Changed – Improved display of real-time chart with more accents on failed and deleted jobs.
• Changed – Don't display queue name in state transition list when it's the `default` one.
• Changed – Display scheduled job count when enqueued count is zero on the main metric.

Extensibility
• Added – `Factory`, `StateMachine` and `Performer` properties to context classes to avoid injecting services.
• Added – Allow to pass custom data to `ApplyStateContext` and `ElectStateContext` instances.
• Added – Preserve custom data dictionary between the entire filter chain.
• Added – Allow to pass transaction to background job state changer when new methods implemented.
• Changed – Ignore some members when serializing a `JobFilterAttribute` instance to decrease payload size.

Storage
• Added – Virtual `JobStorage.GetReadOnlyConnection` method intended to return `JobStorageConnection` for replicas.
• Added – Virtual `JobStorage.HasFeature` method for querying optional features.
• Added – Optional `GetSetCount`, `GetSetContains` and `GetUtcDateTime` methods for the `JobStorageConnection` class.
• Added – Optional `AcquireDistributedLock` and `RemoveFromQueue` methods for the `JobStorageTransaction` class.
• Added – Support for transactional acknowledge using new storage method for better handling some data loss scenarios.
• Added – `CreateJob` method to the `JobStorageTransaction` abstract class.
• Added – `SetJobParameter` method to the `JobStorageTransaction` abstract class.
• Added – Experimental `JobStorageConnection.SetContains` method.
• Added – Optional `ParametersSnapshot` property for `BackgroundJob` and `JobData` classes to minimize roundtrips in future.
• Added – Fetch "Retries" metric with other statistics when supported by storage.
• Added – `JobStorageMonitor` class with more available methods for the new features.
• Changed – Allow to query job parameters without additional roundtrip when supported by a storage.
• Changed – Expose state data dictionaries in list DTOs when supported by storage.

Internals
• Added – `IBackgroundProcess.UseBackgroundPool` now allows to pass thread configuration logic.
• Added – `BackgroundJobServerOptions.WorkerThreadConfigurationAction` option for custom thread configuration.
• Changed – Allow changing queues on the fly with custom worker configuration.
• Changed – Avoid storage roundtrip to query job data in worker, take data from previous state change.
• Changed – `FromParameterAttribute`-based logic now always overwrites arguments, even with non-null values.
• Changed – Turn `JobContinuationOptions` enum into flags while still possible.
• Changed – Re-implement `TaskExtensions.WaitOneAsync` only with the `RegisterWaitForSingleObject` method.
• Changed – `ServerHeartbeatProcess` now uses `ThreadPriority.AboveNormal` to prioritize heartbeats.
 
Hangfire.SqlServer

• Breaking – Dropped `NET45` platform target in favor of `NET451` target to support Visual Studio 2022.

• Added – Recommended Schema 8 migration with fixed `JobQueue.Id` column to use the `bigint` type.
• Added – Automatic client package detection based on available types, preferring `System.Data.SqlClient` (by @0xced).
• Added – `SqlServerStorageOptions.DbProviderFactory` option to use custom provider factory.
• Added – `TryAutoDetectSchemaDependentOptions` option to automatically enable options based on schema.
• Added – `SqlServerStorage.SchemaVersion` metric for Dashboard UI.
• Added – Optional experimental transactional acknowledge for SQL Server (`UseTransactionalAcknowledge` option).
• Added – Implement the `Connection.GetUtcDateTime` feature to make work new changes in schedulers.
• Changed – Remove dependency on System.Data.SqlClient for Hangfire.SqlServer (by @0xced).
• Changed – Set default value for the `QueuePollInterval` option to `TimeSpan.Zero`.
• Changed – Polling delay when `QueuePollInterval` is set to zero now defaults to 200 ms.
• Changed – Sliding invisibility timeout-based fetching method is now used by default with 5 minute timeout.
• Changed – Use command batching by default with 5-minute maximum timeout.
• Changed – Enable `UseRecommendedIsolationLevel` option by default.
• Changed – `GetJobData` now populates `JobData.ParametersSnapshot` property to avoid additional round-trips.
• Changed – Display scheduled and processing jobs in the ascending order in Dashboard UI.
• Deprecated – `UsePageLocksOnDequeue` option is now obsolete and doesn't affect anything.

Hangfire.SqlServer.Msmq

• Breaking – Dropped `NET45` platform target in favor of `NET451` target to support Visual Studio 2022.

Hangfire.NetCore and Hangfire.AspNetCore

• Added – `IApplicationBuilder.UseHangfireServer` that accepts custom factory for `IBackgroundProcessingServer`.

    </releaseNotes>
    <dependencies>
      <group targetFramework="net451">
        <dependency id="Hangfire.Core" version="[0.0.0]" />
        <dependency id="Hangfire.SqlServer" version="[0.0.0]" />
        <dependency id="Microsoft.Owin.Host.SystemWeb" version="3.0.0" />
      </group>
      <group targetFramework="netstandard1.3">
        <dependency id="Hangfire.Core" version="[0.0.0]" />
        <dependency id="Hangfire.SqlServer" version="[0.0.0]" />
        <dependency id="Hangfire.AspNetCore" version="[0.0.0]" />
      </group>
      <group targetFramework="netstandard2.0">
        <dependency id="Hangfire.Core" version="[0.0.0]" />
        <dependency id="Hangfire.SqlServer" version="[0.0.0]" />
        <dependency id="Hangfire.AspNetCore" version="[0.0.0]" />
      </group>
    </dependencies>
  </metadata>
  <files>
    <file src="Content\readme.txt" target="readme.txt" />
  </files>
</package>
