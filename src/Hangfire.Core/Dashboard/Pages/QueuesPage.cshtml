@* Generator: Template TypeVisibility: Internal GeneratePrettyNames: True *@
@using Hangfire.Dashboard
@using Hangfire.Dashboard.Pages
@inherits RazorPage
@{
    Layout = new LayoutPage("Queues");

    var monitor = Storage.GetMonitoringApi();
    var queues = monitor.Queues();
}

<div class="row">
    <div class="col-md-3">
        @Html.JobsSidebar()
    </div>
    <div class="col-md-9">
        <h1 class="page-header">Queues</h1>

        @if (queues.Count == 0)
        {
            <div class="alert alert-warning">
                No queued jobs found. Try to enqueue a job.
            </div>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Queue</th>
                    <th>Length</th>
                    <th>Fetched</th>
                    <th>Next jobs</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var queue in queues)
                {
                    <tr>
                        <td>
                            <a class="label-queue" href="@Url.Queue(queue.Name)">
                                @queue.Name
                            </a>
                        </td>
                        <td>@queue.Length</td>
                        <td>
                            @if (queue.Fetched.HasValue)
                            {
                                <a href="@Url.To("/jobs/enqueued/fetched/" + queue.Name)">
                                    @queue.Fetched
                                </a>
                            }
                            else
                            {
                                <em>N/A</em>
                            }
                        </td>
                        <td>
                            @if (queue.FirstJobs.Count == 0)
                            {
                                <em>No jobs queued.</em>
                            }
                            else
                            {
                                <table class="table table-condensed table-bordered table-inner">
                                    <thead>
                                    <tr>
                                        <th class="min-width">Id</th>
                                        <th class="min-width">State</th>
                                        <th>Job</th>
                                        <th class="align-right min-width">Enqueued</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var job in queue.FirstJobs)
                                    {
                                        <tr class="@(!job.Value.InEnqueuedState ? "obsolete-data" : null)">
                                            <td class="min-width">
                                                @Html.JobIdLink(job.Key)
                                                @if (!job.Value.InEnqueuedState)
                                                {
                                                    <span title="Job's state has been changed while fetching data." class="glyphicon glyphicon-question-sign"></span>
                                                }
                                            </td>
                                            <td class="min-width">
                                                @Html.StateLabel(job.Value.State)
                                            </td>
                                            <td>
                                                @Html.JobNameLink(job.Key, job.Value.Job)
                                            </td>
                                            <td class="align-right min-width">
                                                @if (job.Value.EnqueuedAt.HasValue)
                                                {
                                                    @Html.RelativeTime(job.Value.EnqueuedAt.Value)
                                                }
                                                else
                                                {
                                                    <em>n/a</em>
                                                }
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
</div>