@* Generator: Template TypeVisibility: Internal *@
@using System
@using System.Collections.Generic
@using Hangfire.Common
@using Hangfire.Dashboard
@using Hangfire.Dashboard.Pages
@using Hangfire.Storage.Monitoring
@inherits RazorPage
@{
    Layout = new LayoutPage { Title = "Queues" };

    var monitor = Storage.GetMonitoringApi();
    IList<QueueWithTopEnqueuedJobsDto> queues = monitor.Queues();
}

@if (queues.Count == 0)
{
    <div class="alert alert-warning">
        No queued jobs found. Try to enqueue a job.
    </div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Queue</th>
                <th>Length</th>
                <th>Fetched</th>
                <th>Next jobs</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var queue in queues)
            {
                <tr>
                    <td>
                        <a class="label-queue" href="@LinkTo("/queues/" + queue.Name)">
                            @queue.Name
                        </a>
                    </td>
                    <td>@queue.Length</td>
                    <td>
                        @if (queue.Fetched.HasValue)
                        {
                            <a href="@LinkTo("/queues/fetched/" + queue.Name)">
                                @queue.Fetched
                            </a>
                        }
                        else
                        {
                            <em>N/A</em>
                        }
                    </td>
                    <td>
                        @if (queue.FirstJobs.Count == 0)
                        {
                            <em>No jobs queued.</em>
                        }
                        else
                        {
                            <table class="table table-condensed table-bordered table-inner">
                                <thead>
                                    <tr>
                                        <th class="min-width">Id</th>
                                        <th class="min-width">State</th>
                                        <th>Job</th>
                                        <th class="align-right min-width">Enqueued</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var job in queue.FirstJobs)
                                    {
                                        <tr class="@(!job.Value.InEnqueuedState ? "obsolete-data" : null)">
                                            <td class="min-width">
                                                <a href="@LinkTo("/job/" + job.Key)">@HtmlHelper.JobId(job.Key)</a>
                                                @if (!job.Value.InEnqueuedState)
                                                {
                                                    <span title="Job's state has been changed while fetching data." class="glyphicon glyphicon-question-sign"></span>
                                                }
                                            </td>
                                            <td class="min-width">
                                                <span class="label label-default" style="@(JobHistoryRenderer.ForegroundStateColors.ContainsKey(job.Value.State) ? String.Format("background-color: {0};", JobHistoryRenderer.ForegroundStateColors[job.Value.State]) : null)">
                                                    @job.Value.State
                                                </span>
                                            </td>
                                            <td>
                                                <a class="job-method" href="@LinkTo("/job/" + job.Key)">
                                                    @HtmlHelper.DisplayJob(job.Value.Job)
                                                </a>
                                            </td>
                                            <td class="align-right min-width">
                                                @if (job.Value.EnqueuedAt.HasValue)
                                                {
                                                    <span data-moment="@JobHelper.ToTimestamp(job.Value.EnqueuedAt.Value)">
                                                        @job.Value.EnqueuedAt
                                                    </span>
                                                }
                                                else
                                                {
                                                    <em>n/a</em>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                </td>
            </tr>
            }
        </tbody>
    </table>
}