@* Generator: Template TypeVisibility: Internal GeneratePrettyNames: true *@
@using System
@using System.Collections.Generic
@using CronExpressionDescriptor
@using Hangfire.Dashboard
@using Hangfire.Dashboard.Pages
@using Hangfire.Storage
@inherits RazorPage
@{
    Layout = new LayoutPage("Recurring jobs");
	List<RecurringJobDto> recurringJobs;
    
    int from, perPage;

    int.TryParse(Query("from"), out from);
    int.TryParse(Query("count"), out perPage);

    Pager pager = null;

	using (var connection = Storage.GetConnection())
	{
	    var storageConnection = connection as JobStorageConnection;
	    if (storageConnection != null)
	    {
	        pager = new Pager(from, perPage, storageConnection.GetRecurringJobCount());
	        recurringJobs = storageConnection.GetRecurringJobs(pager.FromRecord, pager.FromRecord + pager.RecordsPerPage - 1);
	    }
	    else
	    {
            recurringJobs = connection.GetRecurringJobs();
	    }
	}
}

<div class="row">
    <div class="col-md-12">
        <h1 class="page-header">Recurring Jobs</h1>

        @if (recurringJobs.Count == 0)
        {
            <div class="alert alert-info">
                No recurring jobs found.
            </div>
        }
        else
        {
            <div class="js-jobs-list">
                <div class="btn-toolbar btn-toolbar-top">
                    <button class="js-jobs-list-command btn btn-sm btn-primary"
                            data-url="@Url.To("/recurring/trigger")"
                            data-loading-text="Triggering..."
                            disabled="disabled">
                        <span class="glyphicon glyphicon-play-circle"></span>
                        Trigger now
                    </button>

                    <button class="js-jobs-list-command btn btn-sm btn-default"
                            data-url="@Url.To("/recurring/remove")"
                            data-loading-text="Removing..."
                            data-confirm="Do you really want to REMOVE ALL selected jobs?"
                            disabled="disabled">
                        <span class="glyphicon glyphicon-remove"></span>
                        Remove
                    </button>

                    @if (pager != null)
                    {
                        @: @Html.PerPageSelector(pager)
                    }
                </div>

                <table class="table">
                    <thead>
                    <tr>
                        <th class="min-width">
                            <input type="checkbox" class="js-jobs-list-select-all"/>
                        </th>
                        <th class="min-width">Id</th>
                        <th class="min-width">Cron</th>
                        <th>Time zone</th>
                        <th>Job</th>
                        <th class="align-right min-width">Next execution</th>
                        <th class="align-right min-width">Last execution</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var job in recurringJobs)
                    {
                        <tr class="js-jobs-list-row hover">
                            <td>
                                <input type="checkbox" class="js-jobs-list-checkbox" name="jobs[]" value="@job.Id"/>
                            </td>
                            <td class="min-width">@job.Id</td>
                            <td class="min-width">
                                @* ReSharper disable once EmptyGeneralCatchClause *@
                                @{
                                    var cronDescription = job.Cron;
                                    try
                                    {
                                        cronDescription = ExpressionDescriptor.GetDescription(job.Cron);
                                    }
                                    catch (FormatException)
                                    {
                                    }
                                }
                                @cronDescription
                            </td>
                            <td class="min-width">
                                @if (!String.IsNullOrWhiteSpace(job.TimeZoneId))
                                {
                                    <span title="@TimeZoneInfo.FindSystemTimeZoneById(job.TimeZoneId).DisplayName" data-container="body">@job.TimeZoneId</span>
                                }
                                else
                                {
                                    @: UTC
                                }
                            </td>
                            <td>
                                @if (job.Job != null)
                                {
                                    @: @Html.JobName(job.Job)
                                }
                                else
                                {
                                    <em>@job.LoadException.InnerException.Message</em>
                                }
                            </td>
                            <td class="align-right min-width">
                                @if (job.NextExecution != null)
                                {
                                    @Html.RelativeTime(job.NextExecution.Value)
                                }
                                else
                                {
                                    <em>N/A</em>
                                }
                            </td>
                            <td class="align-right min-width">
                                @if (job.LastExecution != null)
                                {
                                    if (!String.IsNullOrEmpty(job.LastJobId))
                                    {
                                        <a href="@Url.JobDetails(job.LastJobId)">
                                            <span class="label label-default label-hover" style="@String.Format("background-color: {0};", JobHistoryRenderer.GetForegroundStateColor(job.LastJobState))">
                                                @Html.RelativeTime(job.LastExecution.Value)
                                            </span>
                                        </a>
                                    }
                                    else
                                    {
                                        <em>
                                            Canceled
                                            @Html.RelativeTime(job.LastExecution.Value)
                                        </em>
                                    }
                                }
                                else
                                {
                                    <em>N/A</em>
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>

                @if (pager != null)
                {
                    @: @Html.Paginator(pager)
                }
            </div>
        }
    </div>
</div>    