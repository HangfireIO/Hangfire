@* Generator: Template TypeVisibility: Internal GeneratePrettyNames: True *@
@using System.Collections
@using System.Collections.Generic
@using Hangfire
@using Hangfire.Dashboard
@using Hangfire.Dashboard.Pages
@using Hangfire.Dashboard.Resources
@inherits RazorPage
@{
    Layout = new LayoutPage(Queue);

    int from, perPage;

    int.TryParse(Query("from"), out from);
    int.TryParse(Query("count"), out perPage);

    var monitor = Storage.GetMonitoringApi();
    var pager = new Pager(from, perPage, monitor.FetchedCount(Queue));
    var fetchedJobs = monitor.FetchedJobs(Queue, pager.FromRecord, pager.RecordsPerPage);
}

<div class="row">
    <div class="col-md-3">
        @Html.JobsSidebar()
    </div>
    <div class="col-md-9">
        @Html.Breadcrumbs(Strings.FetchedJobsPage_Title, new Dictionary<string, string>
        {
            { "Queues", Url.LinkToQueues() },
            { Queue, Url.Queue(Queue) }
        })

        <h1 class="page-header">
            @Queue <small>@Strings.FetchedJobsPage_Title</small>
        </h1>

        @if (pager.TotalPageCount == 0)
        {
        <div class="alert alert-info">
            @Strings.FetchedJobsPage_NoJobs
        </div>
        }
        else
        {
        <div class="js-jobs-list">
            <div class="btn-toolbar btn-toolbar-top">
                @if (!IsReadOnly)
                {
                    <button class="js-jobs-list-command btn btn-sm btn-primary"
                            data-url="@Url.To("/jobs/enqueued/requeue")"
                            data-loading-text="@Strings.Common_Enqueueing"
                            disabled="disabled">
                        <span class="glyphicon glyphicon-repeat"></span>
                        @Strings.Common_RequeueJobs
                    </button>
                }
                @if (!IsReadOnly)
                {
                    <button class="js-jobs-list-command btn btn-sm btn-default"
                            data-url="@Url.To("/jobs/enqueued/delete")"
                            data-loading-text="@Strings.Common_Deleting"
                            data-confirm="@Strings.Common_DeleteConfirm"
                            disabled="disabled">
                        <span class="glyphicon glyphicon-remove"></span>
                        @Strings.Common_DeleteSelected
                    </button>
                }
                @Html.PerPageSelector(pager)
            </div>

            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            @if (!IsReadOnly)
                            {
                                <th class="min-width">
                                    <input type="checkbox" class="js-jobs-list-select-all"/>
                                </th>
                            }
                            <th class="min-width">@Strings.Common_Id</th>
                            <th class="min-width">@Strings.Common_State</th>
                            <th>@Strings.Common_Job</th>
                            <th class="align-right">@Strings.Common_Fetched</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var job in fetchedJobs)
                        {
                            <tr class="js-jobs-list-row hover @(job.Value == null ? "obsolete-data" : null)">
                                @if (!IsReadOnly)
                                {
                                    <td>
                                        @if (job.Value != null)
                                        {
                                            <input type="checkbox" class="js-jobs-list-checkbox" name="jobs[]" value="@job.Key"/>
                                        }
                                    </td>
                                }
                                <td class="min-width">
                                    @Html.JobIdLink(job.Key)
                                </td>
                                @if (job.Value == null)
                                {
                                    <td colspan="3"><em>@Strings.Common_JobExpired</em></td>
                                }
                                else
                                {
                                    <td class="min-width">
                                        @Html.StateLabel(job.Value.State)
                                    </td>
                                    <td class="word-break">
                                        @Html.JobNameLink(job.Key, job.Value.Job)
                                    </td>
                                    <td class="align-right">
                                        @if (job.Value.FetchedAt.HasValue)
                                        {
                                            @Html.RelativeTime(job.Value.FetchedAt.Value)
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @Html.Paginator(pager)
        </div>
        }
    </div>
</div>