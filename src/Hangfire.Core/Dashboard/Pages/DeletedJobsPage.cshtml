@* Generator: Template TypeVisibility: Internal GeneratePrettyNames: True *@
@using Hangfire.Dashboard
@using Hangfire.Dashboard.Pages
@inherits RazorPage
@{
    Layout = new LayoutPage("Deleted Jobs");

    int from, perPage;

    int.TryParse(Query("from"), out from);
    int.TryParse(Query("count"), out perPage);

    var monitor = Storage.GetMonitoringApi();
    var pager = new Pager(from, perPage, monitor.DeletedListCount());
    var jobs = monitor.DeletedJobs(pager.FromRecord, pager.RecordsPerPage);
}

<div class="row">
    <div class="col-md-3">
        @Html.JobsSidebar()
    </div>
    <div class="col-md-9">
        <h1 class="page-header">Deleted Jobs</h1>

        @if (pager.TotalPageCount == 0)
        {
            <div class="alert alert-info">
                No deleted jobs found.
            </div>
        }
        else
        {
            <div class="js-jobs-list">
                <div class="btn-toolbar btn-toolbar-top">
                    <button class="js-jobs-list-command btn btn-sm btn-primary"
                            data-url="@Url.To("/jobs/deleted/requeue")"
                            data-loading-text="Enqueueing..."
                            disabled="disabled">
                        <span class="glyphicon glyphicon-repeat"></span>
                        Requeue jobs
                    </button>
                    @Html.PerPageSelector(pager)
                </div>
                <table class="table">
                    <thead>
                    <tr>
                        <th class="min-width">
                            <input type="checkbox" class="js-jobs-list-select-all"/>
                        </th>
                        <th class="min-width">Id</th>
                        <th>Job</th>
                        <th class="align-right">Deleted</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var job in jobs)
                    {
                        <tr class="js-jobs-list-row @(job.Value != null && !job.Value.InDeletedState ? "obsolete-data" : null) @(job.Value != null && job.Value.InDeletedState && job.Value != null ? "hover" : null)">
                            <td>
                                @if (job.Value != null && job.Value.InDeletedState)
                                {
                                    <input type="checkbox" class="js-jobs-list-checkbox" name="jobs[]" value="@job.Key"/>
                                }
                            </td>
                            <td class="min-width">
                                @Html.JobIdLink(job.Key)
                                @if (job.Value != null && !job.Value.InDeletedState)
                                {
                                    <span title="Job's state has been changed while fetching data." class="glyphicon glyphicon-question-sign"></span>
                                }
                            </td>

                            @if (job.Value == null)
                            {
                                <td colspan="2"><em>Job has expired.</em></td>
                            }
                            else
                            {
                                <td>
                                    @Html.JobNameLink(job.Key, job.Value.Job)
                                </td>
                                <td class="align-right">
                                    @if (job.Value.DeletedAt.HasValue)
                                    {
                                        @Html.RelativeTime(job.Value.DeletedAt.Value)
                                    }
                                </td>
                            }
                        </tr>
                    }
                    </tbody>
                </table>

                @Html.Paginator(pager)
            </div>
        }
    </div>
</div>

